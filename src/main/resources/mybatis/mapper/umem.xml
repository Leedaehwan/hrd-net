<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="umem">

<insert id="joing" parameterType="api.u_member.vo.UmemVO">
	INSERT INTO u_member 
	(
	id,pw,name
		<if test="birth != null">,birth</if>
		<if test="email != null">,email</if>
		<if test="phone != null">,phone</if>
		<if test="addr != null">,addr</if>
		<if test="addr2 != null">,addr2</if>
		<if test="c_name != null">,c_name</if>
		,member,u_date
		<if test="stat != null">,stat</if>
		<if test="c_num != null">,c_num</if>
		)
	VALUES 
		(
		#{id},#{pw},#{name}
		<if test="birth != null">,#{birth}</if>
		<if test="email != null">,#{email}</if>
		<if test="phone != null">,#{phone}</if>
		<if test="addr != null">,#{addr}</if>
		<if test="addr2 != null">,#{addr2}</if>
		<if test="c_name != null">,#{c_name}</if>
		,#{member},sysdate
		<if test="stat != null">,#{stat}</if>
		<if test="c_num != null">,#{c_num}</if>
		)
</insert>

<!-- 유저가 회원가입이 되 있는지 안 됬는지 확인 하는 문장 -->
<select id="searchUser" parameterType="String" resultType="String">
	SELECT * FROM u_member
	WHERE id = #{no}
</select>

<select id="user" parameterType="String" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM u_member
	WHERE id = #{no}
</select>

<select id="searchEmail" parameterType="String" resultType="String">
	SELECT * FROM u_member
	WHERE email = #{no} AND member = 'user'
</select>
<!-- 사업자 등록번호 중복체크 -->
<select id="searchCnum" parameterType="String" resultType="String">
	SELECT * FROM u_member
	WHERE c_num = #{c_num} AND stat = '1'
</select>

<!-- 로그인 기능!!! -->
<select id="login" parameterType="Map" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM u_member
	WHERE id = #{id} AND pw = #{pw}
</select>

<!-- 사용자 아이디 찾아주기 기능 -->
<select id="findID" parameterType="String" resultType="String">
	SELECT id FROM u_member
	WHERE email = #{no} AND member = 'user'
</select>

<!-- 사용자 비밀번호 재 발급시 업데이트 기능 -->
<update id="pwUpdate" parameterType="Map"> 
	UPDATE u_member
	SET pw = #{pw}
	WHERE id = #{id}
</update>

<!-- 총 회원의 수를 반환하는 기능! -->
<select id="findUser" resultType="Integer">
	SELECT COUNT(*) FROM u_member
	WHERE stat = 0 OR stat = -1
</select>

<!-- 검색된 회원의 수를 반환하는 기능! -->
<select id="searchFindUser" parameterType="Map" resultType="Integer">
	SELECT COUNT(*) FROM u_member
	WHERE stat = #{stat}
	<if test="result == 'id'">
  		 AND id = #{value}
  	</if>
  	<if test="result == 'name'">
  		AND UPPER(name) LIKE '%'||UPPER(#{value})||'%'
  	</if>
  	<if test="result == 'email'">
  		AND email = #{value}
  	</if>
  	<if test="result == 'addr'">
  		AND UPPER(addr) LIKE '%'||UPPER(#{value})||'%'
  	</if>
  	<if test="result == 'stat'">
  		AND stat = #{value}
  	</if>
  	<if test="result == 'u_date'">
  		AND u_date LIKE '%'||#{value}||'%'
  	</if>
  	<if test="result == 'null' and stat == 0">
  		 OR stat = -1
  	</if>
  	<if test="result == 'null' and stat == 1">
  		 OR stat = -2
  	</if>
  	
</select>

<!-- 총 기업회원의 수를 반환하는 기능! -->
<select id="findCompany" resultType="Integer">
	SELECT COUNT(*) FROM u_member
	WHERE stat = 1 OR stat = -2
</select>

<select id="findCompanySu" resultType="Integer">
	SELECT COUNT(*) FROM u_member
	WHERE stat = 1
</select>

<!-- 사용자의 가입날짜에 따라 숫자를 반환하는 기능 -->
<select id="searchDate" parameterType="Map" resultType="Map">
		SELECT TO_CHAR(b.dt, 'YY-MM') AS u_date
     , NVL(SUM(a.cnt), 0) cnt
  FROM ( SELECT TO_CHAR(u_date, 'YY-MM-DD') AS u_date
              , COUNT(*) cnt
           FROM u_member
          WHERE u_date BETWEEN TO_DATE('${year}', 'YY-MM-DD')
                             AND TO_DATE('${yearMonth}', 'YY-MM-DD') 
                             AND stat = '${stat}'
          GROUP BY u_date
        ) a
      , ( SELECT TO_DATE('${year}','YY-MM-DD') + LEVEL - 1 AS dt
            FROM dual 
         ${hi}
        ) b
  WHERE b.dt = a.u_date(+)
  GROUP BY TO_CHAR(b.dt, 'YY-MM')
  ORDER BY TO_CHAR(b.dt, 'YY-MM')

</select>
<!-- 사용자의 정보를 전부 다 보여주는 기능 -->
<select id="all" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM u_member
</select>

<!-- 원하는 페이지 결과값만큼 반환하는 기능 -->
<select id="getList" parameterType="Map" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM(
	  	SElECT rownum r_num,a.* FROM (
		  	SELECT * FROM u_member     
		  	WHERE stat = #{stat}
		  	<if test="stat == 0">
		  	 	OR stat = -1
		  	</if>
		  	<if test="stat == 1">
		  	 	OR stat = -2
		  	</if>
		  	ORDER BY id DESC
		) a 
	) WHERE r_num BETWEEN #{begin} AND #{end}
</select>

<!-- 찾기 기능 -->
<select id="searchList" parameterType="Map" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM(
	  	SElECT rownum r_num,a.* FROM (
		  	SELECT * FROM u_member
		  	WHERE stat = #{stat}
		  	<if test="result == 'id'">
		  		 AND id = #{value}
		  	</if>
		  	<if test="result == 'name'">
		  		AND UPPER(name) LIKE '%'||UPPER(#{value})||'%'
		  	</if>
		  	<if test="result == 'email'">
		  		AND email = #{value}
		  	</if>
		  	<if test="result == 'addr'">
		  		AND UPPER(addr) LIKE '%'||UPPER(#{value})||'%'
		  	</if>
		  	<if test="result == 'stat'">
		  		AND stat = #{value}
		  	</if>
		  	<if test="result == 'u_date'">
		  		AND u_date LIKE '%'||#{value}||'%'
		  	</if>
		  	<if test="result == 'null' and stat == 0">
		  		 OR stat = -1
		  	</if>
		  	<if test="result == 'null' and stat == 1">
		  		 OR stat = -2
		  	</if>
		  	
		  	ORDER BY id DESC
		) a 
	) WHERE r_num BETWEEN #{begin} AND #{end}
</select>

<!-- 삭제기능 -->
<update id="delList" parameterType="Map">
	UPDATE u_member
	<if test="result == 0">
		SET stat = -1
	</if>
	<if test="result == 1">
		SET stat = -2
	</if>
	WHERE id = #{value}
</update>

<!-- 한 사용자의 정보를 불러오는 기능 -->
<select parameterType="String" id="searchUser2" resultType="api.u_member.vo.UmemVO">
	SELECT * FROM u_member
	WHERE id = #{no}
</select>

<!-- 수강신청 기능 -->
<insert parameterType="Map" id="register">
	INSERT INTO api(a_idx, tr_id, u_mem_id, u_name, u_birth, u_email, u_phone, u_addr, stat)
	VALUES (reg_seq.NEXTVAL, #{tr_id}, #{u_mem_id}, #{u_name}, #{u_birth}, #{u_email}, #{u_phone}, #{u_addr}, #{stat})
</insert>

<!-- 수강신청 인원 확인 기능 -->
<select id="reg_search" parameterType="Map" resultType="String">
	SELECT u_mem_id FROM api
	WHERE u_mem_id = #{u_mem_id} AND tr_id = #{tr_id}
</select>

<!-- 성주 회원탈퇴기능 -->
<update id="del" parameterType="String">
		UPDATE u_member
		SET stat = -1
		WHERE id = #{id}
</update>

</mapper>